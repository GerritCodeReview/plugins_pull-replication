{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44699dde_1b9e8d87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-03-27T16:48:34Z",
      "side": 1,
      "message": "@maczech@gmail.com, @luca.milanesio@gmail.com\n@ponch78@gmail.com and I had a discussion on where would the best place to add this logic.\n\nWe considered to add this directly to the global-refdb, but that would not allow us to skip the fetch, since the ref update is subsequent to any fetch operations.\n\nWe considered to add this to multi-site, but that would not be the right place since multi-site does not and should not know about replication directly.\nAlso the fetch would happen indipendently and multi-site would be notified at the end of the replication event done.\n\nBecause of the above, we thought that pull-replication _itself_ could check the global-refdb _directly_ and avoid alltogether the fetch operation when already up-to-date.\n\nThis is just an untested WIP, but we wanted to trigger a discussion before continuing on this path.\n\nWDYT?",
      "revId": "b95daa19e2e9c27fc7897e6c1b7a68b7830426bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1ebfdac_a20de955",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-03-27T17:53:18Z",
      "side": 1,
      "message": "Maybe it would be better to move that logic closer to the moment when we execute the fetch(for example to the getRefs() method . Fetch task has a replication delay so even if the ref is not up to date when we add it to the delta it can be already synchronised(for example by apply object) when we run the fetch.\n\nIt\u0027s not hypothetical situation this happens quite often when we consume stream events and trigger fetch operation, stream event is consumed and added to fetch task quicker than apply object manage to write data",
      "range": {
        "startLine": 216,
        "startChar": 1,
        "endLine": 220,
        "endChar": 9
      },
      "revId": "b95daa19e2e9c27fc7897e6c1b7a68b7830426bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1e9eb71_8343f2f0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-03-27T19:49:57Z",
      "side": 1,
      "message": "\u003e Maybe it would be better to move that logic closer to the moment when we execute the fetch(for example to the getRefs() method . Fetch task has a replication delay so even if the ref is not up to date when we add it to the delta it can be already synchronised(for example by apply object) when we run the fetch.\n\n+1, remove the __maybe__ because that\u0027s a certainty :-)\n\nAlso, because of the rescheduling and retrying, the order of fetches can be shuffled. We need to check when we actually start executing the fetch operation if we really need to do it or not.\n\n\u003e It\u0027s not hypothetical situation this happens quite often when we consume stream events and trigger fetch operation, stream event is consumed and added to fetch task quicker than apply object manage to write data\n\n+1",
      "parentUuid": "f1ebfdac_a20de955",
      "range": {
        "startLine": 216,
        "startChar": 1,
        "endLine": 220,
        "endChar": 9
      },
      "revId": "b95daa19e2e9c27fc7897e6c1b7a68b7830426bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}