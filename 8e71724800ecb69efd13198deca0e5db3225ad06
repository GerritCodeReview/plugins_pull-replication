{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "261742b6_95394b3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-01-16T18:07:16Z",
      "side": 1,
      "message": "Tested E2E and it works with and without the `replicateProjectDeletions`.\nLGTM!",
      "revId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b582dfff_dcb545c0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/event/StreamEventListener.java",
        "patchSetId": 6
      },
      "lineNbr": 133,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-01-16T18:07:16Z",
      "side": 1,
      "message": "Now that we correctly handle project deletions over stream events consumption, we have uncovered an issue where this line does not cope with projects that might not exist anymore.\n\nFor example imagine we receive a cache-eviction for a project `foo` that was just removed, so it\u0027s no longer on project cache nor on disk.\n\nThe pull_replication_log shows this error:\n\n```\n[2025-01-16 17:49:44,037] source project focaccia not available\ncom.google.gerrit.server.project.NoSuchProjectException: Project not found: focaccia\n\tat com.googlesource.gerrit.plugins.replication.pull.Source$3.call(Source.java:428)\n\tat com.googlesource.gerrit.plugins.replication.pull.Source$3.call(Source.java:418)\n\tat com.google.gerrit.server.util.RequestScopePropagator.lambda$cleanup$1(RequestScopePropagator.java:187)\n\tat com.google.gerrit.server.util.RequestScopePropagator.lambda$context$0(RequestScopePropagator.java:174)\n\tat com.google.gerrit.server.git.PerThreadRequestScope$Propagator.lambda$scope$0(PerThreadRequestScope.java:70)\n\tat com.googlesource.gerrit.plugins.replication.pull.Source.shouldReplicate(Source.java:433)\n\tat com.googlesource.gerrit.plugins.replication.pull.Source.wouldFetchProject(Source.java:782)\n\tat com.googlesource.gerrit.plugins.replication.pull.event.StreamEventListener.shouldReplicateProject(StreamEventListener.java:243)\n\tat com.googlesource.gerrit.plugins.replication.pull.event.StreamEventListener.fetchRefsForEvent(StreamEventListener.java:131)\n\tat com.googlesource.gerrit.plugins.replication.pull.event.StreamEventListener.onEvent(StreamEventListener.java:112)\n\tat com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedAwareEventBroker.fireEventForListener(ForwardedAwareEventBroker.java:63)\n\tat com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedAwareEventBroker.lambda$fireEventForUnrestrictedListeners$0(ForwardedAwareEventBroker.java:57)\n```\n\nThis is because the `shouldReplicateProject` calls `projectCache.get()`, but now that project might no longer exist, since we are handling deletion.\n\nWe can either move the `shouldReplicateProject` in a try block and handle `NoSuchProjectException`, or skip any event type that we are not interested about.\n\nI think this could be done as a follow-up, since it is just noise in the logs.\n\nWDYT?",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 133,
        "endChar": 5
      },
      "revId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81a08c5b_50c731f6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/event/StreamEventListener.java",
        "patchSetId": 6
      },
      "lineNbr": 133,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-01-16T18:30:21Z",
      "side": 1,
      "message": "\u003e For example imagine we receive a cache-eviction for a project foo that was just removed, so it\u0027s no longer on project cache nor on disk.\n\nThat\u0027s strange: cache evictions aren\u0027t consumed by the replication plugin, isn\u0027t it?",
      "parentUuid": "b582dfff_dcb545c0",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 133,
        "endChar": 5
      },
      "revId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bfae782_3ad9cff3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/event/StreamEventListener.java",
        "patchSetId": 6
      },
      "lineNbr": 133,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-01-16T22:23:41Z",
      "side": 1,
      "message": "Yes, you\u0027re right it was not a cache-eviction, as we only consume `ProjectEvent` events [1].\n\nHowever, there are many project events that we might still be consuming that might be referencing the project that was just deleted.\n\nI debugged this particular case and the event is a `FetchRefReplicatedEvent`, but I guess there could be others.\n\nI think we should be handling this case similarly to what the webhooks plugin does, see [2].\n\nHowever, again, this is just noise in the logs and could be done as a follow-up change.\n\n[1] https://gerrit.googlesource.com/plugins/pull-replication/+/refs/heads/stable-3.10/src/main/java/com/googlesource/gerrit/plugins/replication/pull/event/StreamEventListener.java#184\n\n[2]https://gerrit.googlesource.com/plugins/webhooks/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/webhooks/EventHandler.java#62",
      "parentUuid": "81a08c5b_50c731f6",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 133,
        "endChar": 5
      },
      "revId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74b214a3_151b2acf",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/event/StreamEventListener.java",
        "patchSetId": 6
      },
      "lineNbr": 133,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-01-17T09:11:36Z",
      "side": 1,
      "message": "I managed to reproduce the issue: the problem is that we receive the ref-updates events *well before* the create project event, therefore it fails to fetch the refs of a repository that doesn\u0027t exist. However, the issue happens when you *create* the repo and not when you *remove* it. So it is a valid concern but for a different change :-)\n\nI\u0027ve raised the Issue 390443239 and the fix should be in Gerrit core: it is the out of order events propagation for new projects and isn\u0027t directly related to the pull-replication plugin.",
      "parentUuid": "81a08c5b_50c731f6",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 133,
        "endChar": 5
      },
      "revId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Want-Code-Review-From-All",
        "description": {
          "value": "A \u0027Code-Review\u0027 vote is required from all human reviewers (service users that are reviewers are ignored)."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "footer:\"Want-Code-Review: all\" -label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"footer:\"Want-Code-Review: all\" -label:Code-Review>=1,users=human_reviewers"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["footer:\"Want-Code-Review: all\"","label:Code-Review>=1,users=human_reviewers"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review>=1,users=human_reviewers"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8e71724800ecb69efd13198deca0e5db3225ad06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}