{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "530879ad_13868c66",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java",
        "patchSetId": 5
      },
      "lineNbr": 629,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2024-12-31T09:03:12Z",
      "side": 1,
      "message": "Maybe we could follow the same pattern of `anyRefSpecs`, assigning a default value and modifying it later on.\n\nThe change would look like:\n\n```\ndiff --git a/src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java b/src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java\nindex c69b45a..4d4e497 100644\n--- a/src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java\n+++ b/src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java\n@@ -618,6 +618,7 @@ public class FetchOne implements ProjectRunnable, CanceledWhileRunning, Completa\n   private void updateStates(List\u003cRefUpdateState\u003e refUpdates) throws IOException {\n     Set\u003cRefSpec\u003e doneRefSpecs \u003d new HashSet\u003c\u003e();\n     boolean anyRefFailed \u003d false;\n+    succeeded \u003d true;\n     RefUpdate.Result lastRefUpdateResult \u003d RefUpdate.Result.NO_CHANGE;\n \n     for (RefUpdateState u : refUpdates) {\n@@ -649,11 +650,14 @@ public class FetchOne implements ProjectRunnable, CanceledWhileRunning, Completa\n               logStatesArray);\n           fetchStatus \u003d ReplicationState.RefFetchResult.FAILED;\n           anyRefFailed \u003d true;\n+          succeeded \u003d false;\n           break;\n \n         case LOCK_FAILURE:\n+          succeeded \u003d false;\n           throw new LockFailureException(uri, u.toString());\n         case IO_FAILURE:\n+          succeeded \u003d false;\n           throw new IOException(u.toString());\n \n         case REJECTED_OTHER_REASON:\n@@ -664,6 +668,7 @@ public class FetchOne implements ProjectRunnable, CanceledWhileRunning, Completa\n               logStatesArray);\n \n           fetchStatus \u003d ReplicationState.RefFetchResult.FAILED;\n+          succeeded \u003d false;\n           anyRefFailed \u003d true;\n           break;\n       }\n```",
      "range": {
        "startLine": 629,
        "startChar": 6,
        "endLine": 629,
        "endChar": 15
      },
      "revId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e829081f_bf47a99d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/FetchOne.java",
        "patchSetId": 5
      },
      "lineNbr": 629,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-12-31T10:21:29Z",
      "side": 1,
      "message": "We could, but it would be a lot more moving parts IMHO.\n\nAlso, we consider a success if *at least* one ref-update was successful: if we set the default to true and we set to false at any failure, we are breaking the existing behaviour.",
      "parentUuid": "530879ad_13868c66",
      "range": {
        "startLine": 629,
        "startChar": 6,
        "endLine": 629,
        "endChar": 15
      },
      "revId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Want-Code-Review-From-All",
        "description": {
          "value": "A \u0027Code-Review\u0027 vote is required from all human reviewers (service users that are reviewers are ignored)."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "footer:\"Want-Code-Review: all\" -label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"footer:\"Want-Code-Review: all\" -label:Code-Review>=1,users=human_reviewers"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["footer:\"Want-Code-Review: all\"","label:Code-Review>=1,users=human_reviewers"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review>=1,users=human_reviewers"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "85f2493eb2564abb33ea75535bd0d659381eaccd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}