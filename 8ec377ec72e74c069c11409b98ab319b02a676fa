{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c7f8a3f_322f4203",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2023-12-11T08:58:25Z",
      "side": 1,
      "message": "It LGTM, I just want to ensure I understand this correctly. The `/meta` will be replicated at some point by a fetch. This means we might end up with the latest patchset being replicated but not with the last `/meta`, which is better than the contrary, which would lead to the list of issues you mentioned\n\nThis would work for busy repositories since at some point a fetch will bring in the latest `/meta`, correct?\n\nI wonder if it makes sense, maybe as a follow up if this is not enough, to add a retry mechanism to see if the PS at some point has been fetched before giving up. I guess it really depends on the profile of the traffic, since, depending on how long the fetches normally take, the retry might not be effective.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 23,
        "endChar": 0
      },
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "054a3d30_258cfebe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:39:02Z",
      "side": 1,
      "message": "\u003e It LGTM, I just want to ensure I understand this correctly. The `/meta` will be replicated at some point by a fetch.\n\nCorrect.\n\n\u003e This means we might end up with the latest patchset being replicated but not with the last `/meta`, which is better than the contrary, which would lead to the list of issues you mentioned\n\nCorrect, even if falling back to async replication involves also batching by definition. If you have two replication tasks for the same repo, they are aggregated. If they end up in different batches, they could still end up with the same issue, but that\u0027s a different discussion.\n\nFor the guarantee to be kept in the same batch, we need to have the batch-ref-update replication event, which is only from v3.9 onwards.\n\n\n\u003e This would work for busy repositories since at some point a fetch will bring in the latest `/meta`, correct?\n\nBusy or not busy, it will eventually be replicated.\n\n\u003e I wonder if it makes sense, maybe as a follow up if this is not enough, to add a retry mechanism to see if the PS at some point has been fetched before giving up.\n\nWe do have it already: every async replication task has already a retry mechanism implemented.\n \n\u003e I guess it really depends on the profile of the traffic, since, depending on how long the fetches normally take, the retry might not be effective.\n\nNope, high or low traffic, the retry mechanism is still there and will be used.",
      "parentUuid": "5c7f8a3f_322f4203",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 23,
        "endChar": 0
      },
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de0b83f4_30a5706a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:53:38Z",
      "side": 1,
      "message": "Addressed with I000011f",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfa43626_0e75c510",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-12-11T12:53:07Z",
      "side": 1,
      "message": "Maybe as a follow up we could add some cache which will keep the latest patchset for a change. This would help to avoid unnecessary local repo access.",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39306b6d_c779ffd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1155599
      },
      "writtenOn": "2023-12-11T16:42:19Z",
      "side": 1,
      "message": "Just a few post merge questions",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35d2283c_343ea161",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "2023",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24635c06_d4743450",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:53:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35d2283c_343ea161",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16bf9e1e_99bb6211",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1155599
      },
      "writtenOn": "2023-12-11T16:42:19Z",
      "side": 1,
      "message": "Don\u0027t think this was actually done?",
      "parentUuid": "24635c06_d4743450",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53e43fc5_394c82a9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T17:40:50Z",
      "side": 1,
      "message": "Done in the follow-up, the change was merged already.",
      "parentUuid": "16bf9e1e_99bb6211",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5cee575_2fca75d6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "An empty patchset means the we haven\u0027t processed the patchset ref yet, so the meta ref is the first ref we are processing? If that\u0027s the case does it not mean we are running the same inconsistency risk?",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d40e1768_603b1fcb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:53:38Z",
      "side": 1,
      "message": "\u003e An empty patchset means the we haven\u0027t processed the patchset ref yet\n\nNo, that means the update of the `/meta` ref does not refer to a patch-set.\n\n\u003e so the meta ref is the first ref we are processing? If that\u0027s the case does it not mean we are running the same inconsistency risk?\n\nWell, if the \u0027/meta` ref doesn\u0027t point to any patch-set, there is nothing to fail on.",
      "parentUuid": "e5cee575_2fca75d6",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcd53995_e82df50b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "the `patchSetCommit` is only necessary for logging, so two questions:\n- If we fail to calculate it (ie the `parseCommit` throws an error) do we still consider the commit to be valid?\n- How expensive is it to calculate the `patchSetCommit`? Do we really need to do it, especially since we are logging at FINE level?",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e61cb744_8a54667f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:53:38Z",
      "side": 1,
      "message": "\u003e the `patchSetCommit` is only necessary for logging\n\nNo, it isn\u0027t just for logging but also for making sure that we can read the BLOB and parse it as a valid commit object.\n\n\u003e so two questions:\n\u003e - If we fail to calculate it (ie the `parseCommit` throws an error) do we still consider the commit to be valid?\n\nNo, throwing the exception would make the apply-object fail with a 500, which is what we want.\n\n\u003e - How expensive is it to calculate the `patchSetCommit`? Do we really need to do it, especially since we are logging at FINE level?\n\nThe cost to perform this is a valid point and yes, it could be expensive. However, the drawback of not doing it is to accept an update of the \u0027/meta` that would lead to an inconsistency. Therefore, it\u0027s a cost worth spending on it.",
      "parentUuid": "fcd53995_e82df50b",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09940cd9_f08ce4a9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1155599
      },
      "writtenOn": "2023-12-11T16:42:19Z",
      "side": 1,
      "message": "What are the instances in which this could fail? As Chris, slightly concerned of the performance implications of doing this, so wondering why would we have the latest patchset but have an invalid commit? \n\nThe error we\u0027re trying to fix is here \"MissingLatestPatchset\", it looks like we have that, is checking that the commit is valid also necessary?",
      "parentUuid": "e61cb744_8a54667f",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc3ecf4e_2544149f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T17:40:50Z",
      "side": 1,
      "message": "\u003e What are the instances in which this could fail? As Chris, slightly concerned of the performance implications of doing this, so wondering why would we have the latest patchset but have an invalid commit? \n\nThe issue could be if the commit object is not fully resolved for some reasons, and by replicating the `/meta` we would again risk to trigger a `StorageException` upon reindex.\n\n\u003e The error we\u0027re trying to fix is here \"MissingLatestPatchset\", it looks like we have that, is checking that the commit is valid also necessary?\n\nYes, because otherwise the reindex would still fail with a `StorageException` as mentioned.",
      "parentUuid": "09940cd9_f08ce4a9",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "effc6bf3_ecffe1e9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "adding the project name in the log might also be useful",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c07e2f72_6bddaf4d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:53:38Z",
      "side": 1,
      "message": "We don\u0027t have the project name here, but I agree that having the repository would help. Added.",
      "parentUuid": "effc6bf3_ecffe1e9",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66468e75_3f9e47fb",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/replication/pull/api/ApplyObjectActionIT.java",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1155599
      },
      "writtenOn": "2023-12-11T16:42:19Z",
      "side": 1,
      "message": "Not sure I understand why this needs changing if nothing else in the test has changed?",
      "range": {
        "startLine": 38,
        "startChar": 21,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}