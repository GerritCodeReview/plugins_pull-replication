{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c7f8a3f_322f4203",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2023-12-11T08:58:25Z",
      "side": 1,
      "message": "It LGTM, I just want to ensure I understand this correctly. The `/meta` will be replicated at some point by a fetch. This means we might end up with the latest patchset being replicated but not with the last `/meta`, which is better than the contrary, which would lead to the list of issues you mentioned\n\nThis would work for busy repositories since at some point a fetch will bring in the latest `/meta`, correct?\n\nI wonder if it makes sense, maybe as a follow up if this is not enough, to add a retry mechanism to see if the PS at some point has been fetched before giving up. I guess it really depends on the profile of the traffic, since, depending on how long the fetches normally take, the retry might not be effective.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 23,
        "endChar": 0
      },
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "054a3d30_258cfebe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T11:39:02Z",
      "side": 1,
      "message": "\u003e It LGTM, I just want to ensure I understand this correctly. The `/meta` will be replicated at some point by a fetch.\n\nCorrect.\n\n\u003e This means we might end up with the latest patchset being replicated but not with the last `/meta`, which is better than the contrary, which would lead to the list of issues you mentioned\n\nCorrect, even if falling back to async replication involves also batching by definition. If you have two replication tasks for the same repo, they are aggregated. If they end up in different batches, they could still end up with the same issue, but that\u0027s a different discussion.\n\nFor the guarantee to be kept in the same batch, we need to have the batch-ref-update replication event, which is only from v3.9 onwards.\n\n\n\u003e This would work for busy repositories since at some point a fetch will bring in the latest `/meta`, correct?\n\nBusy or not busy, it will eventually be replicated.\n\n\u003e I wonder if it makes sense, maybe as a follow up if this is not enough, to add a retry mechanism to see if the PS at some point has been fetched before giving up.\n\nWe do have it already: every async replication task has already a retry mechanism implemented.\n \n\u003e I guess it really depends on the profile of the traffic, since, depending on how long the fetches normally take, the retry might not be effective.\n\nNope, high or low traffic, the retry mechanism is still there and will be used.",
      "parentUuid": "5c7f8a3f_322f4203",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 23,
        "endChar": 0
      },
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35d2283c_343ea161",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "2023",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5cee575_2fca75d6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "An empty patchset means the we haven\u0027t processed the patchset ref yet, so the meta ref is the first ref we are processing? If that\u0027s the case does it not mean we are running the same inconsistency risk?",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcd53995_e82df50b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "the `patchSetCommit` is only necessary for logging, so two questions:\n- If we fail to calculate it (ie the `parseCommit` throws an error) do we still consider the commit to be valid?\n- How expensive is it to calculate the `patchSetCommit`? Do we really need to do it, especially since we are logging at FINE level?",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "effc6bf3_ecffe1e9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/fetch/ChangeMetaCommitValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T11:41:22Z",
      "side": 1,
      "message": "adding the project name in the log might also be useful",
      "revId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8ec377ec72e74c069c11409b98ab319b02a676fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}