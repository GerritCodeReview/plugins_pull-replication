{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "157aca56_6c9bdb04",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 15,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-17T23:23:09Z",
      "side": 1,
      "message": "There isn\u0027t such thing as `sync` or `async` refs: all the refs updated in a batch are executed *ALL* or *NONE*. The issue in running as separate replication events was that they may have arrived at different times causing performance issues of multiple calls and consistency problems.\n\nSplitting them into two groups would partially mitigate the performance issue but would not resolve the consistency problems. What if one call succeeds and the second fails? The result would be a change in an inconsistent state, which is ultimately what we wanted to avoid.\n\nThis change isn\u0027t providing much benefit to me and needs to be reverted or amended to fix the problem.",
      "range": {
        "startLine": 14,
        "startChar": 46,
        "endLine": 15,
        "endChar": 14
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b2f3e97_e81e3c72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-17T23:23:09Z",
      "side": 1,
      "message": "How do we know? The call is async so it may complete in 1 second, 1 minute, 1 hours, we don\u0027t know really.",
      "range": {
        "startLine": 17,
        "startChar": 30,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fad51393_fcc095ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-17T22:49:30Z",
      "side": 1,
      "message": "Post-merge -2: this is wrong. When we have a batch it should be executed as a whole. It doesn\u0027t make sense to have half sync and half async.",
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c31f76a_52eec233",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-17T23:23:09Z",
      "side": 1,
      "message": "Post-merge -2: this should have not been merged and needs to be fixed urgently on master.",
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa8f0607_21de546d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-17T23:26:20Z",
      "side": 1,
      "message": "We should have involved also @marcin and @dani more actively, who are more aware of the issues associated with the pull-replication and batching consistency.\n\nI am sure that Darius and Ponch did their best to review this change, but possibly did not have enough background on the rationale behind the batching.",
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cc58be5_2810eef9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "Post-merge -2: this is breaking the batching consistency.",
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17af7bc_09037a36",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 17
      },
      "lineNbr": 151,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "I believe the client should just obey to the caller and receive all the associated parameters, including the sync vs. async request.\n\n`ReplicationType` (`SYNC` vs. `ASYNC`) should be a parameter passed to this function.",
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "964d3539_90592bbf",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 17
      },
      "lineNbr": 156,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "This is always `true`, see L155, can be replaced with a constant.",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 156,
        "endChar": 68
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "055c5b57_024fb903",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 17
      },
      "lineNbr": 157,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "This is always `!true` therefore `false`, can be replaced with a literal.",
      "range": {
        "startLine": 157,
        "startChar": 62,
        "endLine": 157,
        "endChar": 68
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e0e40ac_9e3f21a8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 17
      },
      "lineNbr": 162,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "This can be checked at the beginning, `if(refsInBatch.isEmpty())`",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 5
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a36d3a1_13988060",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 17
      },
      "lineNbr": 175,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "They look identical to me: just send the whole set of refs in both cases.\nThe complete set is either all sync or all async, so if you send all of them you cover both cases.",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 175,
        "endChar": 5
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f653078d_a1ec3b61",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 17
      },
      "lineNbr": 189,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-14T21:37:00Z",
      "side": 1,
      "message": "Why splitting the batch? If you send 1/2 of the batch sync and 1/2 of the batch async, you would risk to have inconsistent data until the async operation completes.\n\nIf a Gerrit admin enables the processing in batch then expects to solve the inconsistencies caused by replicating refs one-by-one.\n\nThis split into two makes the synchronous replication effectively useless: replicating something *early* means breaking consistency, so the batching isn\u0027t possible.\n\nWe need to make a choice here: what is more important? Respecting the will of sync vs. async or breaking Gerrit consistency?\n\nTopic open for discussion :-)\n\nP.S. I am surprised this was not coming out of the review process: what went wrong?",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 189,
        "endChar": 5
      },
      "revId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "576cc5486f72b0522eba4994fc93b65874eefe4e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}