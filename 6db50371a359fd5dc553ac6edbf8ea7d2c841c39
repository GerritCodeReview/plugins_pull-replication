{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "52aea102_65709921",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-11-02T18:59:07Z",
      "side": 1,
      "message": "Wouldn\u0027t this give a false perception that replication works fine? \n\nUsers do use the sync replication for a reason. Secretly switching to async replication doesn\u0027t feel good.\n\nWhat will happen when the sync replication is constantly failing? Will we build up a backlog of async replications in the background?\n\nIMO we should at least log a warning and possibly have a configuration option to enable fallback to async replication.",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2adfebb3_655817f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-09T12:31:07Z",
      "side": 1,
      "message": "\u003e Wouldn\u0027t this give a false perception that replication works fine? \n\nIt actually works fine: sync replication is a \"wish\" rather than a \"requirement\"\n\n\u003e Users do use the sync replication for a reason. Secretly switching to async replication doesn\u0027t feel good.\n\nWell, replication is an _eventually consistent_ strategy to align different sites. Synchronous replication is for minimising the split-brain alerts and lock errors, but it may fail.\n\nYou should never assume that all sites are always up-to-date and always responding quicklu.\n\n\u003e What will happen when the sync replication is constantly failing? Will we build up a backlog of async replications in the background?\n\nThat\u0027s not different on what happens when a site is down: the replication events will be queued and eventually executed.\n\n\u003e IMO we should at least log a warning and possibly have a configuration option to enable fallback to async replication.\n\nYou should never ever disable the fallback, so a config option would be a mistake IMHO. A warning isn\u0027t needed because the failure of the apply object is already flagged in the logs.",
      "parentUuid": "52aea102_65709921",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db60a8bf_784c0e24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-09T12:31:07Z",
      "side": 1,
      "message": "Adding @matthias.sohn@gmail.com who has just been hit by this issue on eclipse.gerrithub.io ðŸ˜ž",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faa14cb0_e5921d90",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-11-09T15:37:16Z",
      "side": 1,
      "message": "nit: I don\u0027t like to pass `Optinal`s as arguments. Can we assume that the default replication type is async? Then we can pass `ReplicationType.ASYNC` instead of `Optional.empty()` and have something like:\n\n```java\nBoolean callAsync \u003d Optional.of(resplicationType)\n    .map(rto \u003d\u003e rto \u003d\u003d Replicationatype.ASYNC)\n    .orElseGet(() \u003d\u003e !syncRefsFilter.match(refName));\n```\n\nFor better readability, we can also define `DEFAULT_REPLICATION_TYPE \u003d ReplicationType.ASYNC` and use that constant instead of `Optional.empty()`.\n\nWDYT?",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cff6d45_4b0cd1bc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-20T11:17:16Z",
      "side": 1,
      "message": "\u003e nit: I don\u0027t like to pass `Optinal`s as arguments. \n\nIs this just a general preference or a guideline you saw somewhere?\nI personally prefer Optional\u003c\u003e rather than nulls.\n\n\u003eCan we assume that the default replication type is async?\n\nThe default is taken from the replication.config, so that\u0027s not an option.\n\n\u003e Then we can pass `ReplicationType.ASYNC` instead of `Optional.empty()` and have something like:\n\u003e \n\u003e ```java\n\u003e Boolean callAsync \u003d Optional.of(resplicationType)\n\u003e     .map(rto \u003d\u003e rto \u003d\u003d Replicationatype.ASYNC)\n\u003e     .orElseGet(() \u003d\u003e !syncRefsFilter.match(refName));\n\u003e ```\n\u003e \n\u003e For better readability, we can also define `DEFAULT_REPLICATION_TYPE \u003d ReplicationType.ASYNC` and use that constant instead of `Optional.empty()`.\n\nWe could instead define a `ReplicationType.AUTO` which means that is read from config, WDYT?",
      "parentUuid": "faa14cb0_e5921d90",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdd1966f_931e6e2b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-11-20T13:40:23Z",
      "side": 1,
      "message": "\u003e \u003e nit: I don\u0027t like to pass `Optinal`s as arguments. \n\u003e \n\u003e Is this just a general preference or a guideline you saw somewhere?\n\u003e I personally prefer Optional\u003c\u003e rather than nulls.\n\nHaving an `Optional\u003c\u003e` type as a parameter will not prevent anyone from passing `null` as its value. This means that you have two _undefined_ states:\n* `null` value,\n* `Optional.absent().\n\nAFAIR, libraries like JGit assume that all parameters have _non-null_ value **unless** they\u0027re annotated with `@Nullable`, which IMO is a much better approach, than passing `Optional\u003c\u003e`.\n\nAdditionally, InteliJ IDEA is marking all `Optional\u003c\u003e` parameters as warnings:\n\u003e Optional was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\" was needed.\nUsing a field with the java.util.Optional type is also problematic if the class needs to be Serializable, as java.util.Optional is not serializable.\n\nFinally, `Optional.absent()` is a lot of letters to type ;) and visually takes more space. Ideally, we\u0027d have another method that skips it and provides a default value.\n\n\u003e \u003eCan we assume that the default replication type is async?\n\u003e \n\u003e The default is taken from the replication.config, so that\u0027s not an option.\n\nWe can still inject it, and use that as _default_. It shouldn\u0027t matter where that value is coming from.\n\n\u003e \u003e Then we can pass `ReplicationType.ASYNC` instead of `Optional.empty()` and have something like:\n\u003e \u003e \n\u003e \u003e ```java\n\u003e \u003e Boolean callAsync \u003d Optional.of(resplicationType)\n\u003e \u003e     .map(rto \u003d\u003e rto \u003d\u003d Replicationatype.ASYNC)\n\u003e \u003e     .orElseGet(() \u003d\u003e !syncRefsFilter.match(refName));\n\u003e \u003e ```\n\u003e \u003e \n\u003e \u003e For better readability, we can also define `DEFAULT_REPLICATION_TYPE \u003d ReplicationType.ASYNC` and use that constant instead of `Optional.empty()`.\n\u003e \n\u003e We could instead define a `ReplicationType.AUTO` which means that is read from config, WDYT?\n\nWouldn\u0027t that mean that then `auto` will also be a valid option in the config? AFAIR, when enums are defined as configuration options, all of the defined values can be used in the config. That would create more confusion than it solves. Would rather have a constant.",
      "parentUuid": "5cff6d45_4b0cd1bc",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215fc2fa_815d1795",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-02T12:40:45Z",
      "side": 1,
      "message": "\u003e \u003e \u003e nit: I don\u0027t like to pass `Optinal`s as arguments. \n\u003e \u003e \n\u003e \u003e Is this just a general preference or a guideline you saw somewhere?\n\u003e \u003e I personally prefer Optional\u003c\u003e rather than nulls.\n\u003e \n\u003e Having an `Optional\u003c\u003e` type as a parameter will not prevent anyone from passing `null` as its value. This means that you have two _undefined_ states:\n\u003e * `null` value,\n\u003e * `Optional.absent().\n\nThe parameter isn\u0027t nullable: so passing `null` is not allowed. If anyone does it, then isn\u0027t a supported invocation and should throw an NPE as any other Java methods that are not expecting nullable parameters.\n\n\u003e AFAIR, libraries like JGit assume that all parameters have _non-null_ value **unless** they\u0027re annotated with `@Nullable`, which IMO is a much better approach, than passing `Optional\u003c\u003e`.\n\nI believe is a personal preference. This is not a core plugin or part of Gerrit or JGit, so it remains a preference of the original plugin author, which is me :-)\nI am coming from a Scala background and prefer Optionals to nulls, but that\u0027s just me. As every preference, there isn\u0027t right or wrong in either of them.\n\n\n\u003e Additionally, InteliJ IDEA is marking all `Optional\u003c\u003e` parameters as warnings:\n\u003e \u003e Optional was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\" was needed.\n\nInteresting, do you have links and references to the anti-pattern?\n\n\u003e Using a field with the java.util.Optional type is also problematic if the class needs to be Serializable, as java.util.Optional is not serializable.\n\nYes, that\u0027s a good point. Maybe we should just stop using java.util.Optional and revert to the Guava\u0027s equivalent, which is serialisable.\nhttps://guava.dev/releases/19.0/api/docs/com/google/common/base/Optional.html\n\n\u003e \n\u003e Finally, `Optional.absent()` is a lot of letters to type ;) and visually takes more space. Ideally, we\u0027d have another method that skips it and provides a default value.\n\nYou can import statically `Optional.absent` and type just `absent()` only 2 chars more than typing `null`.\n\n\u003e \u003e \u003eCan we assume that the default replication type is async?\n\u003e \u003e \n\u003e \u003e The default is taken from the replication.config, so that\u0027s not an option.\n\u003e \n\u003e We can still inject it, and use that as _default_. It shouldn\u0027t matter where that value is coming from.\n\nNo so simple though, as it could also be define on a per-source basis.\nI prefer simpler solutions, which is the optional argument here.\n\nI am also open to use Enums, which are more readable and are serialisable.\n\n\u003e \u003e \u003e Then we can pass `ReplicationType.ASYNC` instead of `Optional.empty()` and have something like:\n\u003e \u003e \u003e \n\u003e \u003e \u003e ```java\n\u003e \u003e \u003e Boolean callAsync \u003d Optional.of(resplicationType)\n\u003e \u003e \u003e     .map(rto \u003d\u003e rto \u003d\u003d Replicationatype.ASYNC)\n\u003e \u003e \u003e     .orElseGet(() \u003d\u003e !syncRefsFilter.match(refName));\n\u003e \u003e \u003e ```\n\u003e \u003e \u003e \n\u003e \u003e \u003e For better readability, we can also define `DEFAULT_REPLICATION_TYPE \u003d ReplicationType.ASYNC` and use that constant instead of `Optional.empty()`.\n\u003e \u003e \n\u003e \u003e We could instead define a `ReplicationType.AUTO` which means that is read from config, WDYT?\n\u003e \n\u003e Wouldn\u0027t that mean that then `auto` will also be a valid option in the config? AFAIR, when enums are defined as configuration options, all of the defined values can be used in the config. That would create more confusion than it solves. Would rather have a constant.\n\nTrue.",
      "parentUuid": "bdd1966f_931e6e2b",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "590a0d6b_c333643e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 4
      },
      "lineNbr": 119,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-04T09:57:22Z",
      "side": 1,
      "message": "\u003e \u003e Additionally, InteliJ IDEA is marking all `Optional\u003c\u003e` parameters as warnings:\n\u003e \u003e \u003e Optional was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\" was needed.\n\u003e \n\u003e Interesting, do you have links and references to the anti-pattern?\n\u003e \n\nHere you have a Sonar rule specification:\n\nhttps://rules.sonarsource.com/java/RSPEC-3553/",
      "parentUuid": "215fc2fa_815d1795",
      "revId": "6db50371a359fd5dc553ac6edbf8ea7d2c841c39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}