{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d04d1213_68cf5aef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-05-25T05:34:00Z",
      "side": 1,
      "message": "Here and below: Wrap the line at 73 (or less) characters. See this commendation about commit message: [2].\n\n[2]: https://gerrit-review.googlesource.com/Documentation/dev-crafting-changes.html#commit-message",
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c89c022e_793c4d48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-06-01T10:52:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d04d1213_68cf5aef",
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1c960ab_fc143f37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-05-25T05:28:54Z",
      "side": 1,
      "message": "Mention, that this will also benefit from distributed build e.g. RBE backend that potentially improve performance as well.",
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4371df0_9aaa7df3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-05-25T08:09:20Z",
      "side": 1,
      "message": "You are totally right. I had that comment in mind but i forget it.",
      "parentUuid": "a1c960ab_fc143f37",
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce80e4dc_40640af2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-06-01T10:52:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4371df0_9aaa7df3",
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e610b2b0_d118c97b",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-05-25T05:28:54Z",
      "side": 1,
      "message": "This can be removed now, as it was recently added as temporary solution. This change is a proper fix for the timeout problem. The default \"moderate\" should be fine now: [1].\n\n[1]: https://bazel.build/reference/test-encyclopedia#role-test-runner",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 19
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e22f07a8_3dbfc9f7",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-05-25T08:09:20Z",
      "side": 1,
      "message": "I will remove it.",
      "parentUuid": "e610b2b0_d118c97b",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 19
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cea6439d_5fad9a63",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-06-01T10:52:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e22f07a8_3dbfc9f7",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 19
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a610874c_7b242170",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-05-25T05:28:54Z",
      "side": 1,
      "message": "This shouldn\u0027t be hard coded, effectively, it\u0027s just running one single test for all `glob([\"src/test/java/**/*IT.java\"])`. It should be just: `srcs \u003d [f]`.",
      "range": {
        "startLine": 42,
        "startChar": 21,
        "endLine": 42,
        "endChar": 62
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5be7fdff_a8fe6f9c",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-05-25T08:09:20Z",
      "side": 1,
      "message": "I knew that you were going to make that comment. That was my first attempt but it fails with the following reason:\n```\nplugins/pull-replication/src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationAsyncIT.java:31: error: cannot find symbol\npublic class PullReplicationAsyncIT extends PullReplicationIT {\n```\n\nThe problem is that in the `compilation` of the class `PullReplicationAsyncIT` , the class `PullReplicationIT` is not in the classpath. and I make it work adding:\n```\nsrcs \u003d glob([f + \"src/test/java/**/PullReplicationIT.java\"]),\n```  \n\nI tried to find an elegant solution but i was expecting from your knowledge.",
      "parentUuid": "a610874c_7b242170",
      "range": {
        "startLine": 42,
        "startChar": 21,
        "endLine": 42,
        "endChar": 62
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f74cbf7_3657d53c",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-06-01T10:53:19Z",
      "side": 1,
      "message": "@david.ostrovsky@gmail.com please, let me know when we can have a chat.",
      "parentUuid": "5be7fdff_a8fe6f9c",
      "range": {
        "startLine": 42,
        "startChar": 21,
        "endLine": 42,
        "endChar": 62
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0e256ee_7259f597",
        "filename": "BUILD",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-06-04T08:37:25Z",
      "side": 1,
      "message": "\u003e I knew that you were going to make that comment.\n\nIn this case it would be helpful to add a comment, something like `TODO(user): Explanation this is hack is needed because [...]`.\n\nHowever, `glob([f + \"src/test/java/**/PullReplicationIT.java\"])` is not doing what you are describing. This is basically a no-op while it will produce an empty set and no tests at all are executed now:\n\n```\n  for f in glob([\"src/test/java/**/*IT.java\"])\n```\n\nwould expand the path for each and every matching \"*IT.java\" path. E.g.\n\n```\n  f\u003d\"src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationIT.java\"\n```\n\nThen the result would be concatenated with \"src/test/java/**/PullReplicationIT.java\", that would produce:\n\n  \"src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationIT.javasrc/test/java/**/PullReplicationIT.java\"\n  \nAnd, obviously, the `glob` for that string would be empty for every `f`.\n\nYou could have noticed, that before this change, the integration tests execution took ca. 300 seconds, after this change only afew seconds.\n\nYou could also have checked, with `bazel query` command, what is going on:\n\n```\n$ bazel query --output\u003dbuild //plugins/pull-replication:src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationAsyncITTestSuite\n# /home/davido/projects/gerrit2/plugins/pull-replication/BUILD:39:13\n_gen_suite(\n  name \u003d \"src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationAsyncITTestSuite\",\n  generator_name \u003d \"src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationAsyncITTestSuite\",\n  generator_function \u003d \"junit_tests\",\n  generator_location \u003d \"plugins/pull-replication/BUILD:39:13\",\n  srcs \u003d [],\n  outname \u003d \"src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationAsyncITTestSuite\",\n)\n# Rule src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationAsyncITTestSuite instantiated at (most recent call last):\n#   /home/davido/projects/gerrit2/plugins/pull-replication/BUILD:39:13 in \u003ctoplevel\u003e\n#   /home/davido/projects/gerrit2/tools/bzl/junit.bzl:77:15            in junit_tests\n# Rule _gen_suite defined at (most recent call last):\n#   /home/davido/projects/gerrit2/tools/bzl/junit.bzl:60:18 in \u003ctoplevel\u003e\n\nLoading: 0 packages loaded\n```\n  \nNote the `srcs \u003d []` part should explain that something very basic went wrong.\n\nFinally, when touching build machinery, it is always a good idea, to verify the final artifact. For `java_library`, extract the content and check that was is created what you have expected. For `java_test` rule, just break a test, and verify, that the breakage is reported, e.g.:\n\n```\ndiff --git a/src/test/java/com/googlesource/gerrit/plugins/replication/pull/RevisionReaderIT.java b/src/test/java/com/googlesource/gerrit/plugins/replication/pull/RevisionReaderIT.java\nindex fcd9b19..3f2de2b 100644\n--- a/src/test/java/com/googlesource/gerrit/plugins/replication/pull/RevisionReaderIT.java\n+++ b/src/test/java/com/googlesource/gerrit/plugins/replication/pull/RevisionReaderIT.java\n@@ -75,6 +75,7 @@ public class RevisionReaderIT extends LightweightPluginDaemonTest {\n         refObjectId(refName).flatMap(objId -\u003e readRevisionFromObjectUnderTest(refName, objId, 0));\n \n     assertThat(revisionDataOption.isPresent()).isTrue();\n+    assertThat(revisionDataOption.isPresent()).isFalse();\n     RevisionData revisionData \u003d revisionDataOption.get();\n     assertThat(revisionData).isNotNull();\n     assertThat(revisionData.getCommitObject()).isNotNull();\n```\n\nHowever the test breakage is ignored, indicated, that the test is not executed entirely:\n\n```\n  $ bazel test plugins/pull-replication:src_test_java_com_googlesource_gerrit_plugins_replication_pull_RevisionReaderIT\n[...]\n  Target //plugins/pull-replication:src_test_java_com_googlesource_gerrit_plugins_replication_pull_RevisionReaderIT up-to-date:\n  bazel-bin/plugins/pull-replication/src_test_java_com_googlesource_gerrit_plugins_replication_pull_RevisionReaderIT.jar\n  bazel-bin/plugins/pull-replication/src_test_java_com_googlesource_gerrit_plugins_replication_pull_RevisionReaderIT\nINFO: Elapsed time: 2.121s, Critical Path: 1.93s\nINFO: 4 processes: 1 internal, 2 linux-sandbox, 1 worker.\nINFO: Build completed successfully, 4 total actions\n//plugins/pull-replication:src_test_java_com_googlesource_gerrit_plugins_replication_pull_RevisionReaderIT PASSED in 0.5s\n```\n\nSo, what you probably was trying to achieve, instead of saying this:\n\n```\n srcs \u003d glob([f + \"src/test/java/**/PullReplicationIT.java\"]),\n```\n\nis to add the base class PullReplicationIT for PullReplicationAsyncIT, and only for this test and not for all other tests, so something like this would work:\n\n```\nPULL_REPLICATION_IT_TEST \u003d \"src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationIT.java\"\n\nPULL_REPLICATION_ASYNC_IT_TEST \u003d \"src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationAsyncIT.java\"\n\n[junit_tests(\n    name \u003d f[:f.index(\".\")].replace(\"/\", \"_\"),\n    srcs \u003d [f] + ([PULL_REPLICATION_IT_TEST] if f \u003d\u003d PULL_REPLICATION_ASYNC_IT_TEST else []),\n    tags \u003d [\"pull-replication\"],\n    visibility \u003d [\"//visibility:public\"],\n    deps \u003d PLUGIN_TEST_DEPS + PLUGIN_DEPS + [\n        \":pull-replication__plugin\",\n                \":pull_replication_util\",\n                \"//plugins/replication\",\n                \"@events-broker//jar\"\n    ],\n) for f in glob([\"src/test/java/**/*IT.java\"])]\n```\n\nHowever, with this approach, because the purpose of this change is to split the tests execution, that wouldn\u0027t be really achieved. Even worse, now this test would be executed twice `PullReplicationIT`, for one as standalone test rule and for another as part of the PullReplicationAsyncIT test rule:\n\n```\n\n//plugins/pull-replication:src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationAsyncIT PASSED in 288.8s\n[...]\n//plugins/pull-replication:src_test_java_com_googlesource_gerrit_plugins_replication_pull_PullReplicationIT PASSED in 171.3s\n```\n\nThis could be further improved if standalone test rule: `PullReplicationIT` is excluded (as it is already added anyway in the context of \n`PullReplicationAsyncIT` test):\n\n```\nPULL_REPLICATION_IT_TEST \u003d \"src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationIT.java\"\n\nPULL_REPLICATION_ASYNC_IT_TEST \u003d \"src/test/java/com/googlesource/gerrit/plugins/replication/pull/PullReplicationAsyncIT.java\"\n\n[junit_tests(\n    name \u003d f[:f.index(\".\")].replace(\"/\", \"_\"),\n    srcs \u003d [f] + ([PULL_REPLICATION_IT_TEST] if f \u003d\u003d PULL_REPLICATION_ASYNC_IT_TEST else []),\n    tags \u003d [\"pull-replication\"],\n    visibility \u003d [\"//visibility:public\"],\n    deps \u003d PLUGIN_TEST_DEPS + PLUGIN_DEPS + [\n        \":pull-replication__plugin\",\n        \":pull_replication_util\",\n        \"//plugins/replication\",\n        \"@events-broker//jar\",\n    ],\n) for f in glob(\n    [\"src/test/java/**/*IT.java\"],\n    exclude \u003d [PULL_REPLICATION_IT_TEST],\n)]\n```\n\nStill, the straight forward way to fix the test inter-dependency and to allow to isolate their execution, is to de-couple those tests. Add abstract base class, e.g.:  and derive the regular and async test classes from that base class. I have sent the change 375954 on top of this CL for review.",
      "parentUuid": "0f74cbf7_3657d53c",
      "range": {
        "startLine": 42,
        "startChar": 21,
        "endLine": 42,
        "endChar": 62
      },
      "revId": "b7168b0162512355d7f25acecaa25d084f6aaf66",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}