{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b65a84ee_2daa1149",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "I had no chance to look at tests yet ;)",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67a9011f_dbac736b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 338,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "I don\u0027t understand this logic - probably as a consequence of me not fully understanding the domain. Nonetheless, a ref is considered large if it has no revision data and is not a delete? Why would this mean it\u0027s large? Do we mean large in terms of bytes? Why would it not be large if it contains revision data?",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c3d7d0d_4122a64c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 338,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "\u003e a ref is considered large if it has no revision data and is not a delete?\n\nYes\n\n\u003e Why would this mean it\u0027s large? Do we mean large in terms of bytes?\n\nYes, large in terms of bytes. I am not familiar with the logic either, but looking into the code that creates the revision data (`RevisionReader.verifySize`), we are actually check if the total payload is higher than a configurable threshold, and if yes, we throw an exception which results in an empty optional of revision data.",
      "parentUuid": "67a9011f_dbac736b",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31bac994_ad43029a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 338,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-14T14:23:43Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "4c3d7d0d_4122a64c",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b39b1d9_eaff408d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 340,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "Should this be an instance method on `BatchApplyObjectData`? It might read better as then I (for one) wouldn\u0027t need to understand why this logic maps to meaning it\u0027s a large ref - although granted we\u0027d just be pushing the reasoning elsewhere.",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72676351_13978a89",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 340,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "I dont think you are actually gaining anything here? The logic is applied on a list of `BatchApplyObjectData`. The filter predicate could move into the class as you suggest, but I think the method is so simple, and its name so self-explanatory, that moving it elsewhere is just an overkill.",
      "parentUuid": "9b39b1d9_eaff408d",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "503db391_d0f29205",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 342,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: the function returns `true` if any object that meets criteria is found IOW calling `count` to get all of them is sub-optimal and `anyMatch` would do better here üòä",
      "range": {
        "startLine": 339,
        "startChar": 11,
        "endLine": 342,
        "endChar": 12
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc1b2222_1119d437",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 342,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "well spotted üëç",
      "parentUuid": "503db391_d0f29205",
      "range": {
        "startLine": 339,
        "startChar": 11,
        "endLine": 342,
        "endChar": 12
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c5daad5_3801c568",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 464,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "AFAIU this can happen prior the `for` loop",
      "range": {
        "startLine": 461,
        "startChar": 6,
        "endLine": 464,
        "endChar": 48
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23a37798_5be21219",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 464,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c5daad5_3801c568",
      "range": {
        "startLine": 461,
        "startChar": 6,
        "endLine": 464,
        "endChar": 48
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50e9d145_8b9c94c0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 467,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "I think the client can be created before the for loop too.",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1218bde1_24e678f2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 467,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "good call üëç",
      "parentUuid": "50e9d145_8b9c94c0",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa0571dc_9e766898",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 490,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "If we succeed in creating the project, isn\u0027t that a success case, i.e. shouldn\u0027t we set `resultSuccessful` to `true`?\n\nEDIT: I see this is lifted from `callSendObject`, so not new logic. Still, do you know why?",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e204e607_1e8a04e7",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 490,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "Good question, I dont know why, maybe @Marcin can help.",
      "parentUuid": "fa0571dc_9e766898",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37513173_37b09416",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 521,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "I think we could use some guard clauses to reduce the mental load on this method - it\u0027s quite long and there\u0027s a lot of nesting. This looks like a good candidate to move further up and then break (or return even). I don\u0027t think we need to evaluate `resultIsSuccessful` anymore at the end of the loop.",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ca27f0f_16be8f1e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 521,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "I can move this logic further up, there\u0027s a 3-level nesting, personally I don\u0027t think it helps but that\u0027s personal taste.\n\n\u003e I don\u0027t think we need to evaluate resultIsSuccessful anymore at the end of the loop.\n\nMaybe, I don\u0027t know how succeeding for some source urls might affect the fetch task load for the ones that failed. I don\u0027t know why it was written this way tbh, but your suggestion is definitely something we should not do here, it will require a new change, so feel free to raise a new issue.",
      "parentUuid": "37513173_37b09416",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ecd36ea_b460bd48",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 521,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-14T14:23:43Z",
      "side": 1,
      "message": "Don\u0027t know if it\u0027s worth writing an issue for, just suggesting a way to break this code up into smaller chunks. It\u0027s brand new code so I thought we could do it here, but yes could be in a different change too. Not a biggie.",
      "parentUuid": "1ca27f0f_16be8f1e",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06c92385_3aca8b80",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 698,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: `ReferenceBatchUpdateEvent` -\u003e `ReferenceBatchUpdatedEvent` - to stay consistent with the existing `ReferenceUpdatedEvent`",
      "range": {
        "startLine": 698,
        "startChar": 24,
        "endLine": 698,
        "endChar": 49
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41d15cb6_cddadab5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java",
        "patchSetId": 23
      },
      "lineNbr": 698,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06c92385_3aca8b80",
      "range": {
        "startLine": 698,
        "startChar": 24,
        "endLine": 698,
        "endChar": 49
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce93ca6_0d756784",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectAction.java",
        "patchSetId": 23
      },
      "lineNbr": 26,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: can be package protected as it is ingested in the module in the same package",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 7
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48e56856_674d420a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectAction.java",
        "patchSetId": 23
      },
      "lineNbr": 26,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "sure, was just following similar classes, but your suggestion makes sense.",
      "parentUuid": "9ce93ca6_0d756784",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 7
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cca38be_3315cbd8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectAction.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: injection works on package protected classes",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 9
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "021d1357_69176dda",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectAction.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cca38be_3315cbd8",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 9
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2230f727_02c30991",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 15,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: file comments are formatted with `//` e.g.\n```\n// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n...\n```",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 15,
        "endChar": 3
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d2fcf98_4f9120c8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 15,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "not necessarily, I find 2293 results where copyright header is formatted with `*` - and I couldn\u0027t see a de-facto standard in the gerrit contribution guidelines.",
      "parentUuid": "2230f727_02c30991",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 15,
        "endChar": 3
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab4f5ec3_bbb0b470",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 21,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: is this class needed? AFAIU the `RevisionInput` is eventually used to send data over pipe so maybe we could it from the beginning?",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 33
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c113549_26a10706",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 21,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: how about `@AutoValue`-ing it and skipping the boilerplate code?",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88d45b19_14fe89fd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 21,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c113549_26a10706",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f377c3c4_e97a0c9f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 21,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "I dont think its that simple. The main problem comes from the fact that we pass around a list of refs, and that list can contain both creates and deletes. But we need to know what type each ref is, as the semantics are different. Modifying the RevisionInput to add this information would be a breaking change.",
      "parentUuid": "ab4f5ec3_bbb0b470",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 33
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a52fda7e_d712dd3f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 30,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "nit: it is correct from the language perspective but in the longer term it is preferred to wrap `if` block with braces `{}`",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 30,
        "endChar": 73
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d7a7186_b9ec851d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 30,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "I\u0027ve written too much scala üòä - changed.",
      "parentUuid": "a52fda7e_d712dd3f",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 30,
        "endChar": 73
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5936386_127830fc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 53,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-07T06:31:00Z",
      "side": 1,
      "message": "is this going to explode? how many revisions we are typically seeing? are they in relation to merge of batch of changes (e.g. all under a single topic or grand child of the relation chain)?",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9120c20f_076656d3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 53,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-07T10:13:46Z",
      "side": 1,
      "message": "I honestly don\u0027t know the answers to your questions, @Marcin can you help?\nAlso, what do you mean by \"explode\" and what is your concern?",
      "parentUuid": "b5936386_127830fc",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ae20714_f65a49ad",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 53,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-07-07T10:21:01Z",
      "side": 1,
      "message": "\u003e  are they in relation to merge of batch of changes (e.g. all under a single topic or grand child of the relation chain)?\n\nThose are refs which were updated together during the single batch update. For example when you push change it will contain patchset and meta refs.\n\nI\u0027m not sure if when you submit whole topic all updates are executed as a single batch ref update. But event if this is true we do want to log full content. This is useful for debugging",
      "parentUuid": "9120c20f_076656d3",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98007a69_a928acb5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/api/data/BatchApplyObjectData.java",
        "patchSetId": 23
      },
      "lineNbr": 53,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-17T07:03:48Z",
      "side": 1,
      "message": "I have confirmed that in both cases (`Submit with parents` and `Submit whole topic`) when chain of `n` changes is merged with then `n+1` refs is a part of a single batch refs update event (in cross repos topic case we have on event per repo). IMHO we should limit it to some reasonable value 10? WDYT?",
      "parentUuid": "1ae20714_f65a49ad",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3b94a7d_4d5bdfca",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 23
      },
      "lineNbr": 222,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "This should be a constant as in a previous change in this chain.",
      "range": {
        "startLine": 222,
        "startChar": 35,
        "endLine": 222,
        "endChar": 49
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c021e2c_5290b765",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 23
      },
      "lineNbr": 222,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-07-08T06:24:44Z",
      "side": 1,
      "message": "There are common HTTP constants widely adopted in the Gerrit core e.g. `com.google.common.net.HttpHeaders.CONTENT_TYPE` maybe we could use it here too?",
      "parentUuid": "f3b94a7d_4d5bdfca",
      "range": {
        "startLine": 222,
        "startChar": 35,
        "endLine": 222,
        "endChar": 49
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93656cca_a0a35bf1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 23
      },
      "lineNbr": 222,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "yup, must have missed it, sorted.",
      "parentUuid": "1c021e2c_5290b765",
      "range": {
        "startLine": 222,
        "startChar": 35,
        "endLine": 222,
        "endChar": 49
      },
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51abd9e_f7c569fc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/HttpResult.java",
        "patchSetId": 23
      },
      "lineNbr": 56,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "Nit: Why not make this an affirmation `isSendBatchObjectAvailable`? It would mean not thinking in double negatives, simplifying the mental gymnastics.",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fa7d05c_7606cc0f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/HttpResult.java",
        "patchSetId": 23
      },
      "lineNbr": 56,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e51abd9e_f7c569fc",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d003cf9_53ec17ff",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectActionTest.java",
        "patchSetId": 23
      },
      "lineNbr": 48,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "Nit: not sure what the convention is, but shouldn\u0027t these all be `private static`? They\u0027re all fixtures - why declare them differently?",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51ce40b0_b48352e4",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectActionTest.java",
        "patchSetId": 23
      },
      "lineNbr": 48,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "Don\u0027t know, I think we just copied from another similar test, I\u0027ve changed them here.",
      "parentUuid": "4d003cf9_53ec17ff",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad3a260_c28411e6",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectActionTest.java",
        "patchSetId": 23
      },
      "lineNbr": 173,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-07T21:02:39Z",
      "side": 1,
      "message": "Do we continue to process the revisions if we get a failure? Should we have a test either way?",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bed525c0_10380d2e",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/replication/pull/api/BatchApplyObjectActionTest.java",
        "patchSetId": 23
      },
      "lineNbr": 173,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-07-10T12:18:56Z",
      "side": 1,
      "message": "sure, that\u0027s a good idea üëç",
      "parentUuid": "8ad3a260_c28411e6",
      "revId": "b431107320d822c714106cf0ed55ba7c5d1bfedf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}