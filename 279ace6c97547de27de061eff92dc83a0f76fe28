{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f817e209_2d1821c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2022-05-25T09:42:08Z",
      "side": 1,
      "message": "Links to some resource I used during the writing of this document:\n\nhttps://evgeniy-khyst.com/spring-kafka-non-blocking-retries-and-dlt/\nhttps://blog.pragmatists.com/retrying-consumer-architecture-in-the-apache-kafka-939ac4cb851a\nhttps://www.confluent.io/blog/error-handling-patterns-in-kafka/",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08e4de31_45614c8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "Thanks for proposing this and apologies for the late reply.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14ba2177_395fc259",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "@sasa.zivkov@sap.com, first of all thank you for elaborating this document. I think is brilliant and very interesting. I have made some comments just with the intention of knowing more and to collaborate.\nI hope we can open the conversation and move forward to final solution.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3140d4c_6d934d97",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "apply-object, git-fetch",
      "range": {
        "startLine": 6,
        "startChar": 8,
        "endLine": 6,
        "endChar": 17
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "418048ba_de7d5eff",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "c3140d4c_6d934d97",
      "range": {
        "startLine": 6,
        "startChar": 8,
        "endLine": 6,
        "endChar": 17
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d150270_9dc878dd",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "To",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 3
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "411b1f5f_84ffea35",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "the range of several minutes",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 24
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29c8ac59_51a8f826",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "up to hours",
      "parentUuid": "411b1f5f_84ffea35",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 24
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fd13f8b_cf4cfb48",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "very complex",
      "range": {
        "startLine": 23,
        "startChar": 3,
        "endLine": 23,
        "endChar": 22
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bc7582d_49ee8b96",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "a few seconds",
      "range": {
        "startLine": 30,
        "startChar": 49,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2598f74d_2427dbdf",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "nit: trailing whitespace",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3cca3d5_b9a80fcb",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "nit: trailing whitespace",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d93510fc_0a85a406",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "We should also mention the `apply-object` and the rationale of synchronous replication. With `apply-object` you can _accelerate_ the `git fetch` from seconds down to milliseconds (typically 100x faster).\n\nThe context is typically limited to the replication of `/meta` refs which are very small and updated very frequently.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fb94df1_189a7813",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "That\u0027s very unlikely, but possibly. The most frequent cause of failures has been so far the lock failure.",
      "range": {
        "startLine": 39,
        "startChar": 68,
        "endLine": 39,
        "endChar": 95
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4400b34b_74fa2b19",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "I would also mention that all the retrying activity is carefully tracked by metrics, so that the Gerrit admin could set alerts when tasks are reaching their maximum retry counts.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f972c530_881b111d",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "We should mention here the `apply-objects` REST API call.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84dc883b_3c5698dd",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "\u003e Listening on Gerrit events to create fetch tasks\n\nAre these fetch tasks executed sequentially or in parallel?",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ba12e3_0fad6663",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "to notify each receiving site individually",
      "range": {
        "startLine": 63,
        "startChar": 38,
        "endLine": 63,
        "endChar": 67
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8406d680_01921cf7",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "but sending the event to the pub-sub system after the corresponding ref-update transaction was committed still has a small race since the ref-update could succeed but sending the event to the pub-sub system could fail e.g. if the gerrit server is shutdown in between",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af6c97d3_7c510605",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "retrying that task in case of errors",
      "range": {
        "startLine": 66,
        "startChar": 24,
        "endLine": 66,
        "endChar": 49
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eea8f25b_9348007a",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "That isn\u0027t implemented at the moment, but I agree with you that is desperately needed. Because we assume to have an external `events-broker` implementation, we can rely on it for managing the persistence of the retry operations.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaf4fbf4_622e8253",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "Is the `event broker flow` going to work in conjunction with the `http flow`? It would be good to have a brief clarification.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6935930_997efbdc",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "Probably most of the readers have already a strong knowledge on how pull-replication works in conjunction with events-broker and events-* (events-kafka, events-aws-kinesis,...). Unfortunately I have no deep knowledge of the current approach. For that reason, when the document exposes new solutions, as a reader I would appreciate some clarification to some questions (maybe too many and maybe some of them not important for the moment) that I consider relevant in the cases of introducing event-brokers in any system. These questions are the following:\n\n- Do we use only one topic? how many partitions do we need per topic? \n- given 2 events E1 and E2.  \n  - E1: `ref-updated: refs/changes/02/2/1 for repo1 and change 02` (patchset 1)\n  - E2: `ref-updated: refs/changes/02/2/2 for repo1 and change 02` (patchset 2)\n  \n  - Does the event E1 need to be produced before event E2? \n  - Does the event E1 need to be consumed before event E2?\n  - Does the event E1 need to be processed before event E2?\n  - How much can we parallelise between events? \n  - Can we have race conditions or data inconsistency if the processing is parallelised ? \n \n - What delivery semantics is defined for the producer and the consumer?:\n    - at most once\n    - at least once\n    - exactly once    \n\n- In case of of delivery semantics `at least once` in then consumer, is there a strategy defined to avoid re-processing already successfully processed events?.\n- What type of data retention policies does each type of topic (Gerrit event topics, Retry event topics) have?\n- There are other questions regarding security, data schema evolution, replay strategy, observability and monitoring that at this point are less important.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f7e4ee2_98ebfefb",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "Regarding the different solutions proposed: \n\nThe `first solution` looks to me difficult to implement (maybe i need some clarification):\n- The coexistence between the `Consumer` and `Retryer-Consumer` consumers as a part of the same consumer group looks difficult to me in conjunction with the management of the consumer offset.\n- Identify when an event has been successfully processed previously.\n\nThe `third solution` looks not bad but  I think that there are some important cons:\n- Provision and maintain different topics and their data.\n- The lifecycle of different consumers with different requirements as a part of the same JVM. \n- Too many points of failure\n\nThe `second solution` is my favourite. The cons would be similar to the ones in the third solution but the approach it is much simpler and the most important thing, the management of consumer offsets is very simple.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf41f0e_ac4eaa37",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "after a fetch-task has completed successfully",
      "range": {
        "startLine": 74,
        "startChar": 49,
        "endLine": 74,
        "endChar": 80
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17ac96a7_793a06f1",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "That is achievable, but we do need to choose carefully the group-id and partition key, for not risking to block the entire replication queue in case of long replication tasks (e.g. minutes).",
      "parentUuid": "7cf41f0e_ac4eaa37",
      "range": {
        "startLine": 74,
        "startChar": 49,
        "endLine": 74,
        "endChar": 80
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57a855f2_22d78571",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "+1",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 66
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a22a5ce2_ad8f5e0f",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "remove duplicate word ?",
      "range": {
        "startLine": 82,
        "startChar": 63,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ec0bfff_69ab6dc9",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "\u003e The \"Retryer-Consumer\" periodically retries from the last committed group offset. \n\nI assume that `Retryer-Consumer` consumer belongs to the same consumer group as `Consumer` and every X seconds is instantiated and start consuming from the last consumer group offset. \n\nWhat happens with `Consumer` consumer? if it is running then there will be 2 consumers in the same consumer group and they will split partitions.\n\nPlease, can you elaborate this a bit more?",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "127f992b_93bc7947",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "\u003e The retryer shall avoid re-processing already successfully processed events\n\nit would be interesting to elaborate this point. Any ideas about how to avoid re-processing?",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9af61760_61d3a355",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 88,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "remove duplicate word ?",
      "range": {
        "startLine": 88,
        "startChar": 26,
        "endLine": 88,
        "endChar": 34
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cfa6706_b99b9de2",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "I think I am struggling to see how is the coexistence of both consumers.\nMaybe you could add an example.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c2c8b39_42425e5e",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 97,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "Can we not commit the offset after consuming the event instead of after the processing the event? From my point of view having a `Retry-Topic` topic would simplify the management of the offset. From the \"Consumer\" consumer point of view, all the events are successful. Its responsibility is just to consume them.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fb80933_a2c03b32",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "👍 this looks like a DLQ (dead-letter queue) where replication tasks can be periodically selected and put back into execution.",
      "range": {
        "startLine": 100,
        "startChar": 50,
        "endLine": 100,
        "endChar": 72
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d224395b_83f5fc81",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "periodically? Some kind of exponential backoff retry policy? Maybe the document could explain more without going into much detail.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa24a10d_e30290f1",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "Can we have `race conditions`  when `Consumer` and `Retryer-Consumer` run fetch tasks for the same data? If there are race conditions, any ideas how to solve the problem?",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd419f7b_85defbe3",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "👍 that allows the Gerrit admin to inspect the topic easily and put alerts whenever the topic is not empty.",
      "range": {
        "startLine": 107,
        "startChar": 48,
        "endLine": 107,
        "endChar": 71
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7929c1a4_ed1ade21",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "cd419f7b_85defbe3",
      "range": {
        "startLine": 107,
        "startChar": 48,
        "endLine": 107,
        "endChar": 71
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75a8d97_71e4c2e1",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "This could be also managed in the topic key, doesn\u0027t have to be a separate topic per consumer. Each consumer could receive on their key.",
      "range": {
        "startLine": 110,
        "startChar": 37,
        "endLine": 110,
        "endChar": 57
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efa5f1f8_f3add943",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "@luca.milanesio@gmail.com do you mean to have 1 topic, 2 consumers that belong to different consumer groups (to avoid clashing with the indexes) and each one filter the events that are interested? That is an interesting idea but there are some pros and cons in my opinion. \nPros:\n- Easier infrastructure provision and maintenance\n\nCons:\n- In a high volume traffic of events, the `Retrier Consumer` consumer will have to read a lot of messages and filter them out which it could cause more resource consumption in terms of memory and CPU.",
      "parentUuid": "d75a8d97_71e4c2e1",
      "range": {
        "startLine": 110,
        "startChar": 37,
        "endLine": 110,
        "endChar": 57
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ef14130_32bfcd75",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-09-04T20:57:52Z",
      "side": 1,
      "message": "What would be the advance of this approach?",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 42
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed2f315b_d311889a",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "cascaded retry topics",
      "range": {
        "startLine": 117,
        "startChar": 86,
        "endLine": 117,
        "endChar": 98
      },
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9259188_ec98a91f",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2023-10-13T13:37:26Z",
      "side": 1,
      "message": "Another approach could be to have topics per type of errors.  \n\nFor example:\n\n- Topic `Network error`\n- Topic `Filesystem error`\n- Topic `Git error`\n- Topic `Others`\n\nTherefore when a `Fetch task` fails, the event will be sent to the topic related with that error.\n\nEach topic can have different configuration, requirements and retry policy.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23c9e863_cfde643d",
        "filename": "DESIGN.md",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-05-25T09:57:35Z",
      "side": 1,
      "message": "E.g. if there are 3 cascaded retry topics, the first one could be processed every 10 minutes, the second one every hour, the third one once a day, tasks still failing in the third retry tier would be moved to a failed topic for human inspection.",
      "revId": "279ace6c97547de27de061eff92dc83a0f76fe28",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}