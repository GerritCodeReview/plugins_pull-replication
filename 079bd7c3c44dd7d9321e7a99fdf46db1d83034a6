{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a1feac3_d8c66b60",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-12T08:49:37Z",
      "side": 1,
      "message": "I believe that was done on purpose for asserting the REST-API behaviour on the JSON payload, rather than the one automatically created by the Gson serialiser.\n\nIf you change the serialised classes definition in a non-compatible way, with the hand-crafted JSON payload you\u0027ll notice the breakage, otherwise you won\u0027t.",
      "range": {
        "startLine": 9,
        "startChar": 64,
        "endLine": 10,
        "endChar": 16
      },
      "revId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15cfc2e2_b8522f9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2024-02-12T10:41:32Z",
      "side": 1,
      "message": "That\u0027s a good point @luca.milanesio@gmail.com, thanks for spotting this!\n\nAs far as I can tell, we are just missing a test to cover (de)serialization, to assert the payload string is the expected one, which I am happy to add and it will be trivial.\n\nHowever, your `-2` suggests that you don\u0027t feel this refactoring is useful, perhaps just riskier and needlessly time-consuming, in which case I am happy to abandon ðŸ˜Š",
      "parentUuid": "4a1feac3_d8c66b60",
      "range": {
        "startLine": 9,
        "startChar": 64,
        "endLine": 10,
        "endChar": 16
      },
      "revId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de12d0ce_b877d563",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-12T10:44:51Z",
      "side": 1,
      "message": "we should be testing here the REST API, not JSON serializer/deserializer, any changes in the formatting of payload/response (as long the JSON format is kept valid) should NOT influence the tests.\n\nAny JSON string comparison tests belong to the JSON serializer/deserializer libraries.\n\nHere we should parse the response into objects and assert on object properties.",
      "parentUuid": "4a1feac3_d8c66b60",
      "range": {
        "startLine": 9,
        "startChar": 64,
        "endLine": 10,
        "endChar": 16
      },
      "revId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be22ca9e_079ab6a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-12T08:49:37Z",
      "side": 1,
      "message": "Not sure if we really want this, at least in its current form.",
      "revId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a915ed_58fe5fd4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 3
      },
      "lineNbr": 172,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-12T08:49:37Z",
      "side": 1,
      "message": "If you don\u0027t like the hand-crafted JSON, you should build it using the Gson primitives rather than serialising the object directly.",
      "range": {
        "startLine": 172,
        "startChar": 21,
        "endLine": 172,
        "endChar": 70
      },
      "revId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51a310cb_029defdb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/pull/client/FetchRestApiClient.java",
        "patchSetId": 3
      },
      "lineNbr": 172,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-12T10:44:51Z",
      "side": 1,
      "message": "why would you go and _handcraft the payload using Gson primitives_?\n\nwe should be testing the REST endpoint here, not data serialization/deserialization. How the input is built should not matter, as long as it has a valid format. We can hide this into a private method to reduce the test complexity, but I don\u0027t think we should be bothered by how the input data is being built.\n\nAlso, we could probably extract thee JSON object definitions into a library and share between projects, so that we don\u0027t duplicate object definitions and use the same API across multiple projects.",
      "parentUuid": "e6a915ed_58fe5fd4",
      "range": {
        "startLine": 172,
        "startChar": 21,
        "endLine": 172,
        "endChar": 70
      },
      "revId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "079bd7c3c44dd7d9321e7a99fdf46db1d83034a6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}